public ArrayList<GraphNode> getneighbour(GraphNode node) {
		int index = node.index;
		ArrayList<GraphNode>neighbour=new ArrayList<>();
		for(int i=0;i<adjacency_matrix.length;i++) {
			if(adjacency_matrix[index][i]==1)
				neighbour.add(nodelist.get(i));
		}
		return neighbour;
	}

	public void bfs() {
		System.out.print("\nBFS Path : ");
		for(GraphNode gn:nodelist) {
			if(!gn.visit) 
				breadth_first_search(gn);
		}
	}
	private void breadth_first_search(GraphNode node) {
		Queue<GraphNode> q = new LinkedList<GraphNode>();
		q.add(node);
		node.visit = true;
		while(!q.isEmpty()) {
			GraphNode next = q.remove();
			System.out.print(next.value+" ");
			for(GraphNode neighbour:next.neighbours) {
				if(!neighbour.visit) {
					q.add(neighbour);
					neighbour.visit = true;
				}
			}
		}
	}
	public void dfs() {
		System.out.println("\nDFS path : ");
		for(GraphNode gn:nodelist) {
			if(!gn.visit) {
				depth_first_search(gn);
			}
		}
	}
	private void depth_first_search(GraphNode node) {
		System.out.print(node.value+" ");
		node.visit = true;
		for(GraphNode neighbour:node.neighbours) {
			if(!neighbour.visit) {
				depth_first_search(neighbour);
			}
		}
	}
